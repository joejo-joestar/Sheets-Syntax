[
  {
    "label": "ARRAY_CONSTRAIN",
    "detail": "ARRAY_CONSTRAIN(input_range, num_rows, num_cols)",
    "documentation": "Constrains an array result to a specified size."
  },
  {
    "label": "BYCOL",
    "detail": "BYCOL(array_or_range, LAMBDA)",
    "documentation": "Groups an array by columns by application of a LAMBDA function to each column."
  },
  {
    "label": "BYROW",
    "detail": "BYROW(array_or_range, LAMBDA)",
    "documentation": "Groups an array by rows by application of a LAMBDA function to each row."
  },
  {
    "label": "CHOOSECOLS",
    "detail": "CHOOSECOLS(array, col_num1, [col_num2])",
    "documentation": "Creates a new array from the selected columns in the existing range."
  },
  {
    "label": "CHOOSEROWS",
    "detail": "CHOOSEROWS(array, row_num1, [row_num2])",
    "documentation": "Creates a new array from the selected rows in the existing range."
  },
  {
    "label": "FLATTEN",
    "detail": "FLATTEN(range1,[range2,..])",
    "documentation": "Flattens all the values from one or more ranges into a single column."
  },
  {
    "label": "FREQUENCY",
    "detail": "FREQUENCY(data, classes)",
    "documentation": "Calculates the frequency distribution of a one-column array into specified classes."
  },
  {
    "label": "GROWTH",
    "detail": "GROWTH(known_data_y, [known_data_x], [new_data_x], [b])",
    "documentation": "Given partial data about an exponential growth trend, fits an ideal exponential growth trend and/or predicts further values."
  },
  {
    "label": "HSTACK",
    "detail": "HSTACK(range1; [range2, …])",
    "documentation": "Appends ranges horizontally and in sequence to return a larger array."
  },
  {
    "label": "LINEST",
    "detail": "LINEST(known_data_y, [known_data_x], [calculate_b], [verbose])",
    "documentation": "Given partial data about a linear trend, calculates various parameters about the ideal linear trend using the least-squares method."
  },
  {
    "label": "LOGEST",
    "detail": "LOGEST(known_data_y, [known_data_x], [b], [verbose])",
    "documentation": "Given partial data about an exponential growth curve, calculates various parameters about the best fit ideal exponential growth curve."
  },
  {
    "label": "MAKEARRAY",
    "detail": "MAKEARRAY(rows, columns, LAMBDA)",
    "documentation": "Returns an array of specified dimensions with values calculated by application of a LAMBDA function."
  },
  {
    "label": "MAP",
    "detail": "MAP(array1, [array2, ..], LAMBDA)",
    "documentation": "Maps each value in the given arrays to a new value by application of a LAMBDA function to each value."
  },
  {
    "label": "MDETERM",
    "detail": "MDETERM(square_matrix)",
    "documentation": "Returns the matrix determinant of a square matrix specified as an array or range."
  },
  {
    "label": "MINVERSE",
    "detail": "MINVERSE(square_matrix)",
    "documentation": "Returns the multiplicative inverse of a square matrix specified as an array or range."
  },
  {
    "label": "MMULT",
    "detail": "MMULT(matrix1, matrix2)",
    "documentation": "Calculates the matrix product of two matrices specified as arrays or ranges."
  },
  {
    "label": "REDUCE",
    "detail": "REDUCE(initial_value, array_or_range, LAMBDA)",
    "documentation": "Reduces an array to an accumulated result by application of a LAMBDA function to each value."
  },
  {
    "label": "SCAN",
    "detail": "SCAN(initial_value, array_or_range, LAMBDA)",
    "documentation": "Scans an array and produces intermediate values by application of a LAMBDA function to each value. Returns an array of the intermediate values obtained at each step."
  },
  {
    "label": "SUMPRODUCT",
    "detail": "SUMPRODUCT(array1, [array2, ..])",
    "documentation": "Calculates the sum of the products of corresponding entries in two equal-sized arrays or ranges."
  },
  {
    "label": "SUMX2MY2",
    "detail": "SUMX2MY2(array_x, array_y)",
    "documentation": "Calculates the sum of the differences of the squares of values in two arrays."
  },
  {
    "label": "SUMX2PY2",
    "detail": "SUMX2PY2(array_x, array_y)",
    "documentation": "Calculates the sum of the sums of the squares of values in two arrays."
  },
  {
    "label": "SUMXMY2",
    "detail": "SUMXMY2(array_x, array_y)",
    "documentation": "Calculates the sum of the squares of differences of values in two arrays."
  },
  {
    "label": "TOCOL",
    "detail": "TOCOL(array_or_range, [ignore], [scan_by_column])",
    "documentation": "Transforms an array or range of cells into a single column."
  },
  {
    "label": "TOROW",
    "detail": "TOROW(array_or_range, [ignore], [scan_by_column])",
    "documentation": "Transforms an array or range of cells into a single row."
  },
  {
    "label": "TRANSPOSE",
    "detail": "TRANSPOSE(array_or_range)",
    "documentation": "Transposes the rows and columns of an array or range of cells."
  },
  {
    "label": "TREND",
    "detail": "TREND(known_data_y, [known_data_x], [new_data_x], [b])",
    "documentation": "Given partial data about a linear trend, fits an ideal linear trend using the least squares method and/or predicts further values."
  },
  {
    "label": "VSTACK",
    "detail": "VSTACK(range1; [range2, …])",
    "documentation": "Appends ranges vertically and in sequence to return a larger array."
  },
  {
    "label": "WRAPCOLS",
    "detail": "WRAPCOLS(range, wrap_count, [pad_with])",
    "documentation": "Wraps the provided row or column of cells by columns after a specified number of elements to form a new array."
  },
  {
    "label": "WRAPROWS",
    "detail": "WRAPROWS(range, wrap_count, [pad_with])",
    "documentation": "Wraps the provided row or column of cells by rows after a specified number of elements to form a new array."
  },
  {
    "label": "DAVERAGE",
    "detail": "DAVERAGE(database, field, criteria)",
    "documentation": "Returns the average of a set of values selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DCOUNT",
    "detail": "DCOUNT(database, field, criteria)",
    "documentation": "Counts numeric values selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DCOUNTA",
    "detail": "DCOUNTA(database, field, criteria)",
    "documentation": "Counts values, including text, selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DGET",
    "detail": "DGET(database, field, criteria)",
    "documentation": "Returns a single value from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DMAX",
    "detail": "DMAX(database, field, criteria)",
    "documentation": "Returns the maximum value selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DMIN",
    "detail": "DMIN(database, field, criteria)",
    "documentation": "Returns the minimum value selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DPRODUCT",
    "detail": "DPRODUCT(database, field, criteria)",
    "documentation": "Returns the product of values selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DSTDEV",
    "detail": "DSTDEV(database, field, criteria)",
    "documentation": "Returns the standard deviation of a population sample selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DSTDEVP",
    "detail": "DSTDEVP(database, field, criteria)",
    "documentation": "Returns the standard deviation of an entire population selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DSUM",
    "detail": "DSUM(database, field, criteria)",
    "documentation": "Returns the sum of values selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DVAR",
    "detail": "DVAR(database, field, criteria)",
    "documentation": "Returns the variance of a population sample selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DVARP",
    "detail": "DVARP(database, field, criteria)",
    "documentation": "Returns the variance of an entire population selected from a database table-like array or range using a SQL-like query."
  },
  {
    "label": "DATE",
    "detail": "DATE(year, month, day)",
    "documentation": "Converts a provided year, month, and day into a date."
  },
  {
    "label": "DATEDIF",
    "detail": "DATEDIF(start_date, end_date, unit)",
    "documentation": "Calculates the number of days, months, or years between two dates."
  },
  {
    "label": "DATEVALUE",
    "detail": "DATEVALUE(date_string)",
    "documentation": "Converts a provided date string in a known format to a date value."
  },
  {
    "label": "DAY",
    "detail": "DAY(date)",
    "documentation": "Returns the day of the month that a specific date falls on, in numeric format."
  },
  {
    "label": "DAYS",
    "detail": "DAYS(end_date, start_date)",
    "documentation": "Returns the number of days between two dates."
  },
  {
    "label": "DAYS360",
    "detail": "DAYS360(start_date, end_date, [method])",
    "documentation": "Returns the difference between two days based on the 360 day year used in some financial interest calculations."
  },
  {
    "label": "EDATE",
    "detail": "EDATE(start_date, months)",
    "documentation": "Returns a date a specified number of months before or after another date."
  },
  {
    "label": "EOMONTH",
    "detail": "EOMONTH(start_date, months)",
    "documentation": "Returns a date representing the last day of a month which falls a specified number of months before or after another date."
  },
  {
    "label": "EPOCHTODATE",
    "detail": "EPOCHTODATE(timestamp, [unit])",
    "documentation": "Converts a Unix epoch timestamp in seconds, milliseconds, or microseconds to a datetime in UTC."
  },
  {
    "label": "HOUR",
    "detail": "HOUR(time)",
    "documentation": "Returns the hour component of a specific time, in numeric format."
  },
  {
    "label": "ISOWEEKNUM",
    "detail": "ISOWEEKNUM(date)",
    "documentation": "Returns the number of the ISO week of the year where the provided date falls."
  },
  {
    "label": "MINUTE",
    "detail": "MINUTE(time)",
    "documentation": "Returns the minute component of a specific time, in numeric format."
  },
  {
    "label": "MONTH",
    "detail": "MONTH(date)",
    "documentation": "Returns the month of the year a specific date falls in, in numeric format."
  },
  {
    "label": "NETWORKDAYS",
    "detail": "NETWORKDAYS(start_date, end_date, [holidays])",
    "documentation": "Returns the number of net working days between two provided days."
  },
  {
    "label": "NETWORKDAYS.INTL",
    "detail": "NETWORKDAYS.INTL(start_date, end_date, [weekend], [holidays])",
    "documentation": "Returns the number of net working days between two provided days excluding specified weekend days and holidays."
  },
  {
    "label": "NOW",
    "detail": "NOW()",
    "documentation": "Returns the current date and time as a date value."
  },
  {
    "label": "SECOND",
    "detail": "SECOND(time)",
    "documentation": "Returns the second component of a specific time, in numeric format."
  },
  {
    "label": "TIME",
    "detail": "TIME(hour, minute, second)",
    "documentation": "Converts a provided hour, minute, and second into a time."
  },
  {
    "label": "TIMEVALUE",
    "detail": "TIMEVALUE(time_string)",
    "documentation": "Returns the fraction of a 24-hour day the time represents."
  },
  {
    "label": "TODAY",
    "detail": "TODAY()",
    "documentation": "Returns the current date as a date value."
  },
  {
    "label": "WEEKDAY",
    "detail": "WEEKDAY(date, [type])",
    "documentation": "Returns a number representing the day of the week of the date provided."
  },
  {
    "label": "WEEKNUM",
    "detail": "WEEKNUM(date, [type])",
    "documentation": "Returns a number representing the week of the year where the provided date falls."
  },
  {
    "label": "WORKDAY",
    "detail": "WORKDAY(start_date, num_days, [holidays])",
    "documentation": "Calculates the end date after a specified number of working days."
  },
  {
    "label": "WORKDAY.INTL",
    "detail": "WORKDAY.INTL(start_date, num_days, [weekend], [holidays])",
    "documentation": "Calculates the date after a specified number of workdays excluding specified weekend days and holidays."
  },
  {
    "label": "YEAR",
    "detail": "YEAR(date)",
    "documentation": "Returns the year specified by a given date."
  },
  {
    "label": "YEARFRAC",
    "detail": "YEARFRAC(start_date, end_date, [day_count_convention])",
    "documentation": "Returns the number of years, including fractional years, between two dates using a specified day count convention."
  },
  {
    "label": "BIN2DEC",
    "detail": "BIN2DEC(signed_binary_number)",
    "documentation": "Converts a signed binary number to decimal format."
  },
  {
    "label": "BIN2HEX",
    "detail": "BIN2HEX(signed_binary_number, [significant_digits])",
    "documentation": "Converts a signed binary number to signed hexadecimal format."
  },
  {
    "label": "BIN2OCT",
    "detail": "BIN2OCT(signed_binary_number, [significant_digits])",
    "documentation": "Converts a signed binary number to signed octal format."
  },
  {
    "label": "BITAND",
    "detail": "BITAND(value1, value2)",
    "documentation": "Bitwise boolean AND of two numbers."
  },
  {
    "label": "BITLSHIFT",
    "detail": "BITLSHIFT(value, shift_amount)",
    "documentation": "Shifts the bits of the input a certain number of places to the left."
  },
  {
    "label": "BITOR",
    "detail": "BITOR(value1, value2)",
    "documentation": "Bitwise boolean OR of 2 numbers."
  },
  {
    "label": "BITRSHIFT",
    "detail": "BITRSHIFT(value, shift_amount)",
    "documentation": "Shifts the bits of the input a certain number of places to the right."
  },
  {
    "label": "BITXOR",
    "detail": "BITXOR(value1, value2)",
    "documentation": "Bitwise XOR (exclusive OR) of 2 numbers."
  },
  {
    "label": "COMPLEX",
    "detail": "COMPLEX(real_part, imaginary_part, [suffix])",
    "documentation": "Creates a complex number given real and imaginary coefficients."
  },
  {
    "label": "DEC2BIN",
    "detail": "DEC2BIN(decimal_number, [significant_digits])",
    "documentation": "Converts a decimal number to signed binary format."
  },
  {
    "label": "DEC2HEX",
    "detail": "DEC2HEX(decimal_number, [significant_digits])",
    "documentation": "Converts a decimal number to signed hexadecimal format."
  },
  {
    "label": "DEC2OCT",
    "detail": "DEC2OCT(decimal_number, [significant_digits])",
    "documentation": "Converts a decimal number to signed octal format."
  },
  {
    "label": "DELTA",
    "detail": "DELTA(number1, [number2])",
    "documentation": "Compare two numeric values, returning 1 if they're equal."
  },
  {
    "label": "ERF",
    "detail": "ERF(lower_bound, [upper_bound])",
    "documentation": "The ERF function returns the integral of the Gauss error function over an interval of values."
  },
  {
    "label": "ERF.PRECISE",
    "detail": "ERF.PRECISE(lower_bound, [upper_bound])",
    "documentation": "See ERF"
  },
  {
    "label": "GESTEP",
    "detail": "GESTEP(value, [step])",
    "documentation": "Returns 1 if the rate is strictly greater than or equal to the provided step value or 0 otherwise. If no step value is provided then the default value of 0 will be used."
  },
  {
    "label": "HEX2BIN",
    "detail": "HEX2BIN(signed_hexadecimal_number, [significant_digits])",
    "documentation": "Converts a signed hexadecimal number to signed binary format."
  },
  {
    "label": "HEX2DEC",
    "detail": "HEX2DEC(signed_hexadecimal_number)",
    "documentation": "Converts a signed hexadecimal number to decimal format."
  },
  {
    "label": "HEX2OCT",
    "detail": "HEX2OCT(signed_hexadecimal_number, significant_digits)",
    "documentation": "Converts a signed hexadecimal number to signed octal format."
  },
  {
    "label": "IMABS",
    "detail": "IMABS(number)",
    "documentation": "Returns absolute value of a complex number."
  },
  {
    "label": "IMAGINARY",
    "detail": "IMAGINARY(complex_number)",
    "documentation": "Returns the imaginary coefficient of a complex number."
  },
  {
    "label": "IMARGUMENT",
    "detail": "IMARGUMENT(number)",
    "documentation": "The IMARGUMENT function returns the angle (also known as the argument or \\theta) of the given complex number in radians."
  },
  {
    "label": "IMCONJUGATE",
    "detail": "IMCONJUGATE(number)",
    "documentation": "Returns the complex conjugate of a number."
  },
  {
    "label": "IMCOS",
    "detail": "IMCOS(number)",
    "documentation": "The IMCOS function returns the cosine of the given complex number."
  },
  {
    "label": "IMCOSH",
    "detail": "IMCOSH(number)",
    "documentation": "Returns the hyperbolic cosine of the given complex number. For example, a given complex number \"x+yi\" returns \"cosh(x+yi)."
  },
  {
    "label": "IMCOT",
    "detail": "IMCOT(number)",
    "documentation": "Returns the cotangent of the given complex number. For example, a given complex number \"x+yi\" returns \"cot(x+yi)."
  },
  {
    "label": "IMCOTH",
    "detail": "IMCOTH(number)",
    "documentation": "Returns the hyperbolic cotangent of the given complex number. For example, a given complex number \"x+yi\" returns \"coth(x+yi)."
  },
  {
    "label": "IMCSC",
    "detail": "IMCSC(number)",
    "documentation": "Returns the cosecant of the given complex number."
  },
  {
    "label": "IMCSCH",
    "detail": "IMCSCH(number)",
    "documentation": "Returns the hyperbolic cosecant of the given complex number. For example, a given complex number \"x+yi\" returns \"csch(x+yi)."
  },
  {
    "label": "IMDIV",
    "detail": "IMDIV(dividend, divisor)",
    "documentation": "Returns one complex number divided by another."
  },
  {
    "label": "IMEXP",
    "detail": "IMEXP(exponent)",
    "documentation": "Returns Euler's number, e (~2.718) raised to a complex power."
  },
  {
    "label": "IMLOG",
    "detail": "IMLOG(value, base)",
    "documentation": "Returns the logarithm of a complex number for a specified base."
  },
  {
    "label": "IMLOG10",
    "detail": "IMLOG10(value)",
    "documentation": "Returns the logarithm of a complex number with base 10."
  },
  {
    "label": "IMLOG2",
    "detail": "IMLOG2(value)",
    "documentation": "Returns the logarithm of a complex number with base 2."
  },
  {
    "label": "IMPRODUCT",
    "detail": "IMPRODUCT(factor1, [factor2, ..])",
    "documentation": "Returns the result of multiplying a series of complex numbers together."
  },
  {
    "label": "IMREAL",
    "detail": "IMREAL(complex_number)",
    "documentation": "Returns the real coefficient of a complex number."
  },
  {
    "label": "IMSEC",
    "detail": "IMSEC(number)",
    "documentation": "Returns the secant of the given complex number. For example, a given complex number \"x+yi\" returns \"sec(x+yi)."
  },
  {
    "label": "IMSECH",
    "detail": "IMSECH(number)",
    "documentation": "Returns the hyperbolic secant of the given complex number. For example, a given complex number \"x+yi\" returns \"sech(x+yi)."
  },
  {
    "label": "IMSIN",
    "detail": "IMSIN (number)",
    "documentation": "Returns the sine of the given complex number."
  },
  {
    "label": "IMSINH",
    "detail": "IMSINH(number)",
    "documentation": "Returns the hyperbolic sine of the given complex number. For example, a given complex number \"x+yi\" returns \"sinh(x+yi)."
  },
  {
    "label": "IMSUB",
    "detail": "IMSUB(first_number, second_number)",
    "documentation": "Returns the difference between two complex numbers."
  },
  {
    "label": "IMSUM",
    "detail": "IMSUM(value1, [value2, ..])",
    "documentation": "Returns the sum of a series of complex numbers."
  },
  {
    "label": "IMTAN",
    "detail": "IMTAN(number)",
    "documentation": "Returns the tangent of the given complex number."
  },
  {
    "label": "IMTANH",
    "detail": "IMTANH(number)",
    "documentation": "Returns the hyperbolic tangent of the given complex number. For example, a given complex number \"x+yi\" returns \"tanh(x+yi)."
  },
  {
    "label": "OCT2BIN",
    "detail": "OCT2BIN(signed_octal_number, [significant_digits])",
    "documentation": "Converts a signed octal number to signed binary format."
  },
  {
    "label": "OCT2DEC",
    "detail": "OCT2DEC(signed_octal_number)",
    "documentation": "Converts a signed octal number to decimal format."
  },
  {
    "label": "OCT2HEX",
    "detail": "OCT2HEX(signed_octal_number, [significant_digits])",
    "documentation": "Converts a signed octal number to signed hexadecimal format."
  },
  {
    "label": "FILTER",
    "detail": "FILTER(range, condition1, [condition2])",
    "documentation": "Returns a filtered version of the source range, returning only rows or columns which meet the specified conditions."
  },
  {
    "label": "SORT",
    "detail": "SORT(range, sort_column, is_ascending, [sort_column2], [is_ascending2])",
    "documentation": "Sorts the rows of a given array or range by the values in one or more columns."
  },
  {
    "label": "SORTN",
    "detail": "SORTN(range, [n], [display_ties_mode], [sort_column1, is_ascending1], ..)",
    "documentation": "Returns the first n items in a data set after performing a sort."
  },
  {
    "label": "UNIQUE",
    "detail": "UNIQUE(range)",
    "documentation": "Returns unique rows in the provided source range, discarding duplicates. Rows are returned in the order in which they first appear in the source range."
  },
  {
    "label": "ACCRINT",
    "detail": "ACCRINT(issue, first_payment, settlement, rate, redemption, frequency, [day_count_convention])",
    "documentation": "Calculates the accrued interest of a security that has periodic payments."
  },
  {
    "label": "ACCRINTM",
    "detail": "ACCRINTM(issue, maturity, rate, [redemption], [day_count_convention])",
    "documentation": "Calculates the accrued interest of a security that pays interest at maturity."
  },
  {
    "label": "AMORLINC",
    "detail": "AMORLINC(cost, purchase_date, first_period_end, salvage, period, rate, [basis])",
    "documentation": "Returns the depreciation for an accounting period, or the prorated depreciation if the asset was purchased in the middle of a period."
  },
  {
    "label": "COUPDAYBS",
    "detail": "COUPDAYBS(settlement, maturity, frequency, [day_count_convention])",
    "documentation": "Calculates the number of days from the first coupon, or interest payment, until settlement."
  },
  {
    "label": "COUPDAYS",
    "detail": "COUPDAYS(settlement, maturity, frequency, [day_count_convention])",
    "documentation": "Calculates the number of days in the coupon, or interest payment, period that contains the specified settlement date."
  },
  {
    "label": "COUPDAYSNC",
    "detail": "COUPDAYSNC(settlement, maturity, frequency, [day_count_convention])",
    "documentation": "Calculates the number of days from the settlement date until the next coupon, or interest payment."
  },
  {
    "label": "COUPNCD",
    "detail": "COUPNCD(settlement, maturity, frequency, [day_count_convention])",
    "documentation": "Calculates next coupon, or interest payment, date after the settlement date."
  },
  {
    "label": "COUPNUM",
    "detail": "COUPNUM(settlement, maturity, frequency, [day_count_convention])",
    "documentation": "Calculates the number of coupons, or interest payments, between the settlement date and the maturity date of the investment."
  },
  {
    "label": "COUPPCD",
    "detail": "COUPPCD(settlement, maturity, frequency, [day_count_convention])",
    "documentation": "Calculates last coupon, or interest payment, date before the settlement date."
  },
  {
    "label": "CUMIPMT",
    "detail": "CUMIPMT(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)",
    "documentation": "Calculates the cumulative interest over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate."
  },
  {
    "label": "CUMPRINC",
    "detail": "CUMPRINC(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)",
    "documentation": "Calculates the cumulative principal paid over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate."
  },
  {
    "label": "DB",
    "detail": "DB(cost, salvage, life, period, [month])",
    "documentation": "Calculates the depreciation of an asset for a specified period using the arithmetic declining balance method."
  },
  {
    "label": "DDB",
    "detail": "DDB(cost, salvage, life, period, [factor])",
    "documentation": "Calculates the depreciation of an asset for a specified period using the double-declining balance method."
  },
  {
    "label": "DISC",
    "detail": "DISC(settlement, maturity, price, redemption, [day_count_convention])",
    "documentation": "Calculates the discount rate of a security based on price."
  },
  {
    "label": "DOLLARDE",
    "detail": "DOLLARDE(fractional_price, unit)",
    "documentation": "Converts a price quotation given as a decimal fraction into a decimal value."
  },
  {
    "label": "DOLLARFR",
    "detail": "DOLLARFR(decimal_price, unit)",
    "documentation": "Converts a price quotation given as a decimal value into a decimal fraction."
  },
  {
    "label": "DURATION",
    "detail": "DURATION(settlement, maturity, rate, yield, frequency, [day_count_convention]) .",
    "documentation": "Calculates the number of compounding periods required for an investment of a specified present value appreciating at a given rate to reach a target value."
  },
  {
    "label": "EFFECT",
    "detail": "EFFECT(nominal_rate, periods_per_year)",
    "documentation": "Calculates the annual effective interest rate given the nominal rate and number of compounding periods per year."
  },
  {
    "label": "FV",
    "detail": "FV(rate, number_of_periods, payment_amount, [present_value], [end_or_beginning])",
    "documentation": "Calculates the future value of an annuity investment based on constant-amount periodic payments and a constant interest rate."
  },
  {
    "label": "FVSCHEDULE",
    "detail": "FVSCHEDULE(principal, rate_schedule)",
    "documentation": "Calculates the future value of some principal based on a specified series of potentially varying interest rates."
  },
  {
    "label": "INTRATE",
    "detail": "INTRATE(buy_date, sell_date, buy_price, sell_price, [day_count_convention])",
    "documentation": "Calculates the effective interest rate generated when an investment is purchased at one price and sold at another with no interest or dividends generated by the investment itself."
  },
  {
    "label": "IPMT",
    "detail": "IPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])",
    "documentation": "Calculates the payment on interest for an investment based on constant-amount periodic payments and a constant interest rate."
  },
  {
    "label": "IRR",
    "detail": "IRR(cashflow_amounts, [rate_guess])",
    "documentation": "Calculates the internal rate of return on an investment based on a series of periodic cash flows."
  },
  {
    "label": "ISPMT",
    "detail": "ISPMT(rate, period, number_of_periods, present_value)",
    "documentation": "The ISPMT function calculates the interest paid during a particular period of an investment."
  },
  {
    "label": "MDURATION",
    "detail": "MDURATION(settlement, maturity, rate, yield, frequency, [day_count_convention])",
    "documentation": "Calculates the modified Macaulay duration of a security paying periodic interest, such as a US Treasury Bond, based on expected yield."
  },
  {
    "label": "MIRR",
    "detail": "MIRR(cashflow_amounts, financing_rate, reinvestment_return_rate)",
    "documentation": "Calculates the modified internal rate of return on an investment based on a series of periodic cash flows and the difference between the interest rate paid on financing versus the return received on reinvested income."
  },
  {
    "label": "NOMINAL",
    "detail": "NOMINAL(effective_rate, periods_per_year)",
    "documentation": "Calculates the annual nominal interest rate given the effective rate and number of compounding periods per year."
  },
  {
    "label": "NPER",
    "detail": "NPER(rate, payment_amount, present_value, [future_value], [end_or_beginning])",
    "documentation": "Calculates the number of payment periods for an investment based on constant-amount periodic payments and a constant interest rate."
  },
  {
    "label": "NPV",
    "detail": "NPV(discount, cashflow1, [cashflow2, ..])",
    "documentation": "Calculates the net present value of an investment based on a series of periodic cash flows and a discount rate."
  },
  {
    "label": "PDURATION",
    "detail": "PDURATION(rate, present_value, future_value)",
    "documentation": "Returns the number of periods for an investment to reach a specific value at a given rate."
  },
  {
    "label": "PMT",
    "detail": "PMT(rate, number_of_periods, present_value, [future_value], [end_or_beginning])",
    "documentation": "Calculates the periodic payment for an annuity investment based on constant-amount periodic payments and a constant interest rate."
  },
  {
    "label": "PPMT",
    "detail": "PPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])",
    "documentation": "Calculates the payment on the principal of an investment based on constant-amount periodic payments and a constant interest rate."
  },
  {
    "label": "PRICE",
    "detail": "PRICE(settlement, maturity, rate, yield, redemption, frequency, [day_count_convention])",
    "documentation": "Calculates the price of a security paying periodic interest, such as a US Treasury Bond, based on expected yield."
  },
  {
    "label": "PRICEDISC",
    "detail": "PRICEDISC(settlement, maturity, discount, redemption, [day_count_convention])",
    "documentation": "Calculates the price of a discount (non-interest-bearing) security, based on expected yield."
  },
  {
    "label": "PRICEMAT",
    "detail": "PRICEMAT(settlement, maturity, issue, rate, yield, [day_count_convention])",
    "documentation": "Calculates the price of a security paying interest at maturity, based on expected yield."
  },
  {
    "label": "PV",
    "detail": "PV(rate, number_of_periods, payment_amount, [future_value], [end_or_beginning])",
    "documentation": "Calculates the present value of an annuity investment based on constant-amount periodic payments and a constant interest rate."
  },
  {
    "label": "RATE",
    "detail": "RATE(number_of_periods, payment_per_period, present_value, [future_value], [end_or_beginning], [rate_guess])",
    "documentation": "Calculates the interest rate of an annuity investment based on constant-amount periodic payments and the assumption of a constant interest rate."
  },
  {
    "label": "RECEIVED",
    "detail": "RECEIVED(settlement, maturity, investment, discount, [day_count_convention])",
    "documentation": "Calculates the amount received at maturity for an investment in fixed-income securities purchased on a given date."
  },
  {
    "label": "RRI",
    "detail": "RRI(number_of_periods, present_value, future_value)",
    "documentation": "Returns the interest rate needed for an investment to reach a specific value within a given number of periods."
  },
  {
    "label": "SLN",
    "detail": "SLN(cost, salvage, life)",
    "documentation": "Calculates the depreciation of an asset for one period using the straight-line method."
  },
  {
    "label": "SYD",
    "detail": "SYD(cost, salvage, life, period)",
    "documentation": "Calculates the depreciation of an asset for a specified period using the sum of years digits method."
  },
  {
    "label": "TBILLEQ",
    "detail": "TBILLEQ(settlement, maturity, discount)",
    "documentation": "Calculates the equivalent annualized rate of return of a US Treasury Bill based on discount rate."
  },
  {
    "label": "TBILLPRICE",
    "detail": "TBILLPRICE(settlement, maturity, discount)",
    "documentation": "Calculates the price of a US Treasury Bill based on discount rate."
  },
  {
    "label": "TBILLYIELD",
    "detail": "TBILLYIELD(settlement, maturity, price)",
    "documentation": "Calculates the yield of a US Treasury Bill based on price."
  },
  {
    "label": "VDB",
    "detail": "VDB(cost, salvage, life, start_period, end_period, [factor], [no_switch])",
    "documentation": "Returns the depreciation of an asset for a particular period (or partial period)."
  },
  {
    "label": "XIRR",
    "detail": "XIRR(cashflow_amounts, cashflow_dates, [rate_guess])",
    "documentation": "Calculates the internal rate of return of an investment based on a specified series of potentially irregularly spaced cash flows."
  },
  {
    "label": "XNPV",
    "detail": "XNPV(discount, cashflow_amounts, cashflow_dates)",
    "documentation": "Calculates the net present value of an investment based on a specified series of potentially irregularly spaced cash flows and a discount rate."
  },
  {
    "label": "YIELD",
    "detail": "YIELD(settlement, maturity, rate, price, redemption, frequency, [day_count_convention])",
    "documentation": "Calculates the annual yield of a security paying periodic interest, such as a US Treasury Bond, based on price."
  },
  {
    "label": "YIELDDISC",
    "detail": "YIELDDISC(settlement, maturity, price, redemption, [day_count_convention])",
    "documentation": "Calculates the annual yield of a discount (non-interest-bearing) security, based on price."
  },
  {
    "label": "YIELDMAT",
    "detail": "YIELDMAT(settlement, maturity, issue, rate, price, [day_count_convention])",
    "documentation": "Calculates the annual yield of a security paying interest at maturity, based on price."
  },
  {
    "label": "ARRAYFORMULA",
    "detail": "ARRAYFORMULA(array_formula)",
    "documentation": "Enables the display of values returned from an array formula into multiple rows and/or columns and the use of non-array functions with arrays."
  },
  {
    "label": "DETECTLANGUAGE",
    "detail": "DETECTLANGUAGE(text_or_range)",
    "documentation": "Identifies the language used in text within the specified range."
  },
  {
    "label": "GOOGLEFINANCE",
    "detail": "GOOGLEFINANCE(ticker, [attribute], [start_date], [end_date|num_days], [interval])",
    "documentation": "Fetches current or historical securities information from Google Finance."
  },
  {
    "label": "GOOGLETRANSLATE",
    "detail": "GOOGLETRANSLATE(text, [source_language], [target_language])",
    "documentation": "Translates text from one language into another"
  },
  {
    "label": "IMAGE",
    "detail": "IMAGE(url, [mode], [height], [width])",
    "documentation": "Inserts an image into a cell."
  },
  {
    "label": "QUERY",
    "detail": "QUERY(data, query, [headers])",
    "documentation": "Runs a Google Visualization API Query Language query across data."
  },
  {
    "label": "SPARKLINE",
    "detail": "SPARKLINE(data, [options])",
    "documentation": "Creates a miniature chart contained within a single cell."
  },
  {
    "label": "ERROR.TYPE",
    "detail": "ERROR.TYPE(reference)",
    "documentation": "Returns a number corresponding to the error value in a different cell."
  },
  {
    "label": "ISBLANK",
    "detail": "ISBLANK(value)",
    "documentation": "Checks whether the referenced cell is empty."
  },
  {
    "label": "ISDATE",
    "detail": "ISDATE(value)",
    "documentation": "Returns whether a value is a date."
  },
  {
    "label": "ISEMAIL",
    "detail": "ISEMAIL(value)",
    "documentation": "Checks whether a value is a valid email address."
  },
  {
    "label": "ISERR",
    "detail": "ISERR(value)",
    "documentation": "Checks whether a value is an error other than `#N/A`."
  },
  {
    "label": "ISERROR",
    "detail": "ISERROR(value)",
    "documentation": "Checks whether a value is an error."
  },
  {
    "label": "ISFORMULA",
    "detail": "ISFORMULA(cell)",
    "documentation": "Checks whether a formula is in the referenced cell."
  },
  {
    "label": "ISLOGICAL",
    "detail": "ISLOGICAL(value)",
    "documentation": "Checks whether a value is `TRUE` or `FALSE`."
  },
  {
    "label": "ISNA",
    "detail": "ISNA(value)",
    "documentation": "Checks whether a value is the error `#N/A`."
  },
  {
    "label": "ISNONTEXT",
    "detail": "ISNONTEXT(value)",
    "documentation": "Checks whether a value is non-textual."
  },
  {
    "label": "ISNUMBER",
    "detail": "ISNUMBER(value)",
    "documentation": "Checks whether a value is a number."
  },
  {
    "label": "ISREF",
    "detail": "ISREF(value)",
    "documentation": "Checks whether a value is a valid cell reference."
  },
  {
    "label": "ISTEXT",
    "detail": "ISTEXT(value)",
    "documentation": "Checks whether a value is text."
  },
  {
    "label": "N",
    "detail": "N(value)",
    "documentation": "Returns the argument provided as a number."
  },
  {
    "label": "NA",
    "detail": "NA()",
    "documentation": "Returns the \"value not available\" error, `#N/A`."
  },
  {
    "label": "TYPE",
    "detail": "TYPE(value)",
    "documentation": "Returns a number associated with the type of data passed into the function."
  },
  {
    "label": "CELL",
    "detail": "CELL(info_type, reference)",
    "documentation": "Returns the requested information about the specified cell."
  },
  {
    "label": "AND",
    "detail": "AND(logical_expression1, [logical_expression2, ..])",
    "documentation": "Returns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false."
  },
  {
    "label": "FALSE",
    "detail": "FALSE()",
    "documentation": "Returns the logical value `FALSE`."
  },
  {
    "label": "IF",
    "detail": "IF(logical_expression, value_if_true, value_if_false)",
    "documentation": "Returns one value if a logical expression is `TRUE` and another if it is `FALSE`."
  },
  {
    "label": "IFERROR",
    "detail": "IFERROR(value, [value_if_error])",
    "documentation": "Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent."
  },
  {
    "label": "IFNA",
    "detail": "IFNA(value, value_if_na)",
    "documentation": "Evaluates a value. If the value is an #N/A error, returns the specified value."
  },
  {
    "label": "IFS",
    "detail": "IFS(condition1, value1, [condition2, value2], …)",
    "documentation": "Evaluates multiple conditions and returns a value that corresponds to the first true condition."
  },
  {
    "label": "LAMBDA",
    "detail": "LAMBDA(name, formula_expression)",
    "documentation": "Creates and returns a custom function with a set of names and a formula_expression that uses them. To calculate the formula_expression, you can call the returned function with as many values as the name declares."
  },
  {
    "label": "LET",
    "detail": "LET(name1, value_expression1, [name2, …], [value_expression2, …], formula_expression )",
    "documentation": "Assigns name with the value_expression results and returns the result of the formula_expression. The formula_expression can use the names defined in the scope of the LET function. The value_expressions are evaluated only once in the LET function even if the following value_expressions or the formula_expression use them multiple times."
  },
  {
    "label": "NOT",
    "detail": "NOT(logical_expression)",
    "documentation": "Returns the opposite of a logical value - `NOT(TRUE)` returns `FALSE`; `NOT(FALSE)` returns `TRUE`."
  },
  {
    "label": "OR",
    "detail": "OR(logical_expression1, [logical_expression2, ..])",
    "documentation": "Returns true if any of the provided arguments are logically true, and false if all of the provided arguments are logically false."
  },
  {
    "label": "SWITCH",
    "detail": "SWITCH(expression, case1, value1, [default or case2, value2], …)",
    "documentation": "Tests an expression against a list of cases and returns the corresponding value of the first matching case, with an optional default value if nothing else is met."
  },
  {
    "label": "TRUE",
    "detail": "TRUE()",
    "documentation": "Returns the logical value `TRUE`."
  },
  {
    "label": "XOR",
    "detail": "XOR(logical_expression1, [logical_expression2, ..])",
    "documentation": "The XOR function performs an exclusive or of 2 numbers that returns a 1 if the numbers are different, and a 0 otherwise."
  },
  {
    "label": "ADDRESS",
    "detail": "ADDRESS(row, column, [absolute_relative_mode], [use_a1_notation], [sheet])",
    "documentation": "Returns a cell reference as a string."
  },
  {
    "label": "CHOOSE",
    "detail": "CHOOSE(index, choice1, [choice2, ..])",
    "documentation": "Returns an element from a list of choices based on index."
  },
  {
    "label": "COLUMN",
    "detail": "COLUMN([cell_reference])",
    "documentation": "Returns the column number of a specified cell, with `A=1`."
  },
  {
    "label": "COLUMNS",
    "detail": "COLUMNS(range)",
    "documentation": "Returns the number of columns in a specified array or range."
  },
  {
    "label": "FORMULATEXT",
    "detail": "FORMULATEXT(cell)",
    "documentation": "Returns the formula as a string."
  },
  {
    "label": "GETPIVOTDATA",
    "detail": "GETPIVOTDATA(value_name, any_pivot_table_cell, [original_column, ..], [pivot_item, ..]",
    "documentation": "Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings."
  },
  {
    "label": "HLOOKUP",
    "detail": "HLOOKUP(search_key, range, index, [is_sorted])",
    "documentation": "Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found."
  },
  {
    "label": "INDEX",
    "detail": "INDEX(reference, [row], [column])",
    "documentation": "Returns the content of a cell, specified by row and column offset."
  },
  {
    "label": "INDIRECT",
    "detail": "INDIRECT(cell_reference_as_string, [is_A1_notation])",
    "documentation": "Returns a cell reference specified by a string."
  },
  {
    "label": "LOOKUP",
    "detail": "LOOKUP(search_key, search_range|search_result_array, [result_range])",
    "documentation": "Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column."
  },
  {
    "label": "MATCH",
    "detail": "MATCH(search_key, range, [search_type])",
    "documentation": "Returns the relative position of an item in a range that matches a specified value."
  },
  {
    "label": "OFFSET",
    "detail": "OFFSET(cell_reference, offset_rows, offset_columns, [height], [width])",
    "documentation": "Returns a range reference shifted a specified number of rows and columns from a starting cell reference."
  },
  {
    "label": "ROW",
    "detail": "ROW([cell_reference])",
    "documentation": "Returns the row number of a specified cell."
  },
  {
    "label": "ROWS",
    "detail": "ROWS(range)",
    "documentation": "Returns the number of rows in a specified array or range."
  },
  {
    "label": "VLOOKUP",
    "detail": "VLOOKUP(search_key, range, index, [is_sorted])",
    "documentation": "Vertical lookup. Searches down the first column of a range for a key and returns the value of a specified cell in the row found."
  },
  {
    "label": "XLOOKUP",
    "detail": "XLOOKUP(search_key, lookup_range, result_range, missing_value, [match_mode], [search_mode])",
    "documentation": "Returns the values in the result range based on the position where a match was found in the lookup range. If no match is found, it returns the closest match."
  },
  {
    "label": "ABS",
    "detail": "ABS(value)",
    "documentation": "Returns the absolute value of a number."
  },
  {
    "label": "ACOS",
    "detail": "ACOS(value)",
    "documentation": "Returns the inverse cosine of a value, in radians."
  },
  {
    "label": "ACOSH",
    "detail": "ACOSH(value)",
    "documentation": "Returns the inverse hyperbolic cosine of a number."
  },
  {
    "label": "ACOT",
    "detail": "ACOT(value)",
    "documentation": "Returns the inverse cotangent of a value, in radians."
  },
  {
    "label": "ACOTH",
    "detail": "ACOTH(value)",
    "documentation": "Returns the inverse hyperbolic cotangent of a value, in radians. Must not be between -1 and 1, inclusive."
  },
  {
    "label": "ASIN",
    "detail": "ASIN(value)",
    "documentation": "Returns the inverse sine of a value, in radians."
  },
  {
    "label": "ASINH",
    "detail": "ASINH(value)",
    "documentation": "Returns the inverse hyperbolic sine of a number."
  },
  {
    "label": "ATAN",
    "detail": "ATAN(value)",
    "documentation": "Returns the inverse tangent of a value, in radians."
  },
  {
    "label": "ATAN2",
    "detail": "ATAN2(x, y)",
    "documentation": "Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair (`x`,`y`), in radians."
  },
  {
    "label": "ATANH",
    "detail": "ATANH(value)",
    "documentation": "Returns the inverse hyperbolic tangent of a number."
  },
  {
    "label": "BASE",
    "detail": "BASE(value, base, [min_length])",
    "documentation": "Converts a number into a text representation in another base, for example, base 2 for binary."
  },
  {
    "label": "CEILING",
    "detail": "CEILING(value, [factor])",
    "documentation": "Rounds a number up to the nearest integer multiple of specified significance."
  },
  {
    "label": "CEILING.MATH",
    "detail": "CEILING.MATH(number, [significance], [mode])",
    "documentation": "Rounds a number up to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from 0 depending on the mode."
  },
  {
    "label": "CEILING.PRECISE",
    "detail": "CEILING.PRECISE(number, [significance])",
    "documentation": "Rounds a number up to the nearest integer multiple of specified significance. If the number is positive or negative, it is rounded up."
  },
  {
    "label": "COMBIN",
    "detail": "COMBIN(n, k)",
    "documentation": "Returns the number of ways to choose some number of objects from a pool of a given size of objects."
  },
  {
    "label": "COMBINA",
    "detail": "COMBINA(n, k)",
    "documentation": "Returns the number of ways to choose some number of objects from a pool of a given size of objects, including ways that choose the same object multiple times."
  },
  {
    "label": "COS",
    "detail": "COS(angle)",
    "documentation": "Returns the cosine of an angle provided in radians."
  },
  {
    "label": "COSH",
    "detail": "COSH(value)",
    "documentation": "Returns the hyperbolic cosine of any real number."
  },
  {
    "label": "COT",
    "detail": "COT(angle)",
    "documentation": "Cotangent of an angle provided in radians."
  },
  {
    "label": "COTH",
    "detail": "COTH(value)",
    "documentation": "Returns the hyperbolic cotangent of any real number."
  },
  {
    "label": "COUNTBLANK",
    "detail": "COUNTBLANK(range)",
    "documentation": "Returns the number of empty cells in a given range."
  },
  {
    "label": "COUNTIF",
    "detail": "COUNTIF(range, criterion)",
    "documentation": "Returns a conditional count across a range."
  },
  {
    "label": "COUNTIFS",
    "detail": "COUNTIFS(criteria_range1, criterion1, [criteria_range2, criterion2, ..])",
    "documentation": "Returns the count of a range depending on multiple criteria."
  },
  {
    "label": "COUNTUNIQUE",
    "detail": "COUNTUNIQUE(value1, [value2, ..])",
    "documentation": "Counts the number of unique values in a list of specified values and ranges."
  },
  {
    "label": "CSC",
    "detail": "CSC(angle)",
    "documentation": "Returns the cosecant of an angle provided in radians."
  },
  {
    "label": "CSCH",
    "detail": "CSCH(value)",
    "documentation": "The CSCH function returns the hyperbolic cosecant of any real number."
  },
  {
    "label": "DECIMAL",
    "detail": "DECIMAL(value, base)",
    "documentation": "The DECIMAL function converts the text representation of a number in another base, to base 10 (decimal)."
  },
  {
    "label": "DEGREES",
    "detail": "DEGREES(angle)",
    "documentation": "Converts an angle value in radians to degrees."
  },
  {
    "label": "ERFC",
    "detail": "ERFC(z)",
    "documentation": "Returns the complementary Gauss error function of a value."
  },
  {
    "label": "ERFC.PRECISE",
    "detail": "ERFC.PRECISE(z)",
    "documentation": "See ERFC"
  },
  {
    "label": "EVEN",
    "detail": "EVEN(value)",
    "documentation": "Rounds a number up to the nearest even integer."
  },
  {
    "label": "EXP",
    "detail": "EXP(exponent)",
    "documentation": "Returns Euler's number, e (~2.718) raised to a power."
  },
  {
    "label": "FACT",
    "detail": "FACT(value)",
    "documentation": "Returns the factorial of a number."
  },
  {
    "label": "FACTDOUBLE",
    "detail": "FACTDOUBLE(value)",
    "documentation": "Returns the \"double factorial\" of a number."
  },
  {
    "label": "FLOOR",
    "detail": "FLOOR(value, [factor])",
    "documentation": "Rounds a number down to the nearest integer multiple of specified significance."
  },
  {
    "label": "FLOOR.MATH",
    "detail": "FLOOR.MATH(number, [significance], [mode])",
    "documentation": "Rounds a number down to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from 0 depending on the mode."
  },
  {
    "label": "FLOOR.PRECISE",
    "detail": "FLOOR.PRECISE(number, [significance])",
    "documentation": "The FLOOR.PRECISE function rounds a number down to the nearest integer or multiple of specified significance."
  },
  {
    "label": "GAMMALN",
    "detail": "GAMMALN(value)",
    "documentation": "Returns the the logarithm of a specified Gamma function, base e (Euler's number)."
  },
  {
    "label": "GAMMALN.PRECISE",
    "detail": "GAMMALN.PRECISE(value)",
    "documentation": "See GAMMALN"
  },
  {
    "label": "GCD",
    "detail": "GCD(value1, value2)",
    "documentation": "Returns the greatest common divisor of one or more integers."
  },
  {
    "label": "IMLN",
    "detail": "IMLN(complex_value)",
    "documentation": "Returns the logarithm of a complex number, base e (Euler's number)."
  },
  {
    "label": "IMPOWER",
    "detail": "IMPOWER(complex_base, exponent)",
    "documentation": "Returns a complex number raised to a power."
  },
  {
    "label": "IMSQRT",
    "detail": "IMSQRT(complex_number)",
    "documentation": "Computes the square root of a complex number."
  },
  {
    "label": "INT",
    "detail": "INT(value)",
    "documentation": "Rounds a number down to the nearest integer that is less than or equal to it."
  },
  {
    "label": "ISEVEN",
    "detail": "ISEVEN(value)",
    "documentation": "Checks whether the provided value is even."
  },
  {
    "label": "ISO.CEILING",
    "detail": "ISO.CEILING(number, [significance])",
    "documentation": "See CEILING.PRECISE"
  },
  {
    "label": "ISODD",
    "detail": "ISODD(value)",
    "documentation": "Checks whether the provided value is odd."
  },
  {
    "label": "LCM",
    "detail": "LCM(value1, value2)",
    "documentation": "Returns the least common multiple of one or more integers."
  },
  {
    "label": "LN",
    "detail": "LN(value)",
    "documentation": "Returns the the logarithm of a number, base e (Euler's number)."
  },
  {
    "label": "LOG",
    "detail": "LOG(value, base)",
    "documentation": "Returns the the logarithm of a number given a base."
  },
  {
    "label": "LOG10",
    "detail": "LOG10(value)",
    "documentation": "Returns the the logarithm of a number, base 10."
  },
  {
    "label": "MOD",
    "detail": "MOD(dividend, divisor)",
    "documentation": "Returns the result of the modulo operator, the remainder after a division operation."
  },
  {
    "label": "MROUND",
    "detail": "MROUND(value, factor)",
    "documentation": "Rounds one number to the nearest integer multiple of another."
  },
  {
    "label": "MULTINOMIAL",
    "detail": "MULTINOMIAL(value1, value2)",
    "documentation": "Returns the factorial of the sum of values divided by the product of the values' factorials."
  },
  {
    "label": "MUNIT",
    "detail": "MUNIT(dimension)",
    "documentation": "Returns a unit matrix of size dimension x dimension."
  },
  {
    "label": "ODD",
    "detail": "ODD(value)",
    "documentation": "Rounds a number up to the nearest odd integer."
  },
  {
    "label": "PI",
    "detail": "PI()",
    "documentation": "Returns the value of Pi to 14 decimal places."
  },
  {
    "label": "POWER",
    "detail": "POWER(base, exponent)",
    "documentation": "Returns a number raised to a power."
  },
  {
    "label": "PRODUCT",
    "detail": "PRODUCT(factor1, [factor2, ..])",
    "documentation": "Returns the result of multiplying a series of numbers together."
  },
  {
    "label": "QUOTIENT",
    "detail": "QUOTIENT(dividend, divisor)",
    "documentation": "Returns one number divided by another."
  },
  {
    "label": "RADIANS",
    "detail": "RADIANS(angle)",
    "documentation": "Converts an angle value in degrees to radians."
  },
  {
    "label": "RAND",
    "detail": "RAND()",
    "documentation": "Returns a random number between 0 inclusive and 1 exclusive."
  },
  {
    "label": "RANDARRAY",
    "detail": "RANDARRAY(rows, columns)",
    "documentation": "Generates an array of random numbers between 0 and 1."
  },
  {
    "label": "RANDBETWEEN",
    "detail": "RANDBETWEEN(low, high)",
    "documentation": "Returns a uniformly random integer between two values, inclusive."
  },
  {
    "label": "ROUND",
    "detail": "ROUND(value, [places])",
    "documentation": "Rounds a number to a certain number of decimal places according to standard rules."
  },
  {
    "label": "ROUNDDOWN",
    "detail": "ROUNDDOWN(value, [places])",
    "documentation": "Rounds a number to a certain number of decimal places, always rounding down to the next valid increment."
  },
  {
    "label": "ROUNDUP",
    "detail": "ROUNDUP(value, [places])",
    "documentation": "Rounds a number to a certain number of decimal places, always rounding up to the next valid increment."
  },
  {
    "label": "SEC",
    "detail": "SEC(angle)",
    "documentation": "The SEC function returns the secant of an angle, measured in radians."
  },
  {
    "label": "SECH",
    "detail": "SECH(value)",
    "documentation": "The SECH function returns the hyperbolic secant of an angle."
  },
  {
    "label": "SEQUENCE",
    "detail": "SEQUENCE(rows, columns, start, step)",
    "documentation": "Returns an array of sequential numbers, such as 1, 2, 3, 4."
  },
  {
    "label": "SERIESSUM",
    "detail": "SERIESSUM(x, n, m, a)",
    "documentation": "Given parameters x, n, m, and a, returns the power series sum a1xn + a2x(n+m) + .. + aix(n+(i-1)m), where i is the number of entries in range `a`."
  },
  {
    "label": "SIGN",
    "detail": "SIGN(value)",
    "documentation": "Given an input number, returns `-1` if it is negative, `1` if positive, and `0` if it is zero."
  },
  {
    "label": "SIN",
    "detail": "SIN(angle)",
    "documentation": "Returns the sine of an angle provided in radians."
  },
  {
    "label": "SINH",
    "detail": "SINH(value)",
    "documentation": "Returns the hyperbolic sine of any real number."
  },
  {
    "label": "SQRT",
    "detail": "SQRT(value)",
    "documentation": "Returns the positive square root of a positive number."
  },
  {
    "label": "SQRTPI",
    "detail": "SQRTPI(value)",
    "documentation": "Returns the positive square root of the product of Pi and the given positive number."
  },
  {
    "label": "SUBTOTAL",
    "detail": "SUBTOTAL(function_code, range1, [range2, ..])",
    "documentation": "Returns a subtotal for a vertical range of cells using a specified aggregation function."
  },
  {
    "label": "SUM",
    "detail": "SUM(value1, [value2, ..])",
    "documentation": "Returns the sum of a series of numbers and/or cells."
  },
  {
    "label": "SUMIF",
    "detail": "SUMIF(range, criterion, [sum_range])",
    "documentation": "Returns a conditional sum across a range."
  },
  {
    "label": "SUMIFS",
    "detail": "SUMIFS(sum_range, criteria_range1, criterion1, [criteria_range2, criterion2, ..])",
    "documentation": "Returns the sum of a range depending on multiple criteria."
  },
  {
    "label": "SUMSQ",
    "detail": "SUMSQ(value1, [value2, ..])",
    "documentation": "Returns the sum of the squares of a series of numbers and/or cells."
  },
  {
    "label": "TAN",
    "detail": "TAN(angle)",
    "documentation": "Returns the tangent of an angle provided in radians."
  },
  {
    "label": "TANH",
    "detail": "TANH(value)",
    "documentation": "Returns the hyperbolic tangent of any real number."
  },
  {
    "label": "TRUNC",
    "detail": "TRUNC(value, [places])",
    "documentation": "Truncates a number to a certain number of significant digits by omitting less significant digits."
  },
  {
    "label": "ADD",
    "detail": "ADD(value1, value2)",
    "documentation": "Returns the sum of two numbers. Equivalent to the `+` operator."
  },
  {
    "label": "CONCAT",
    "detail": "CONCAT(value1, value2)",
    "documentation": "Returns the concatenation of two values. Equivalent to the `&` operator."
  },
  {
    "label": "DIVIDE",
    "detail": "DIVIDE(dividend, divisor)",
    "documentation": "Returns one number divided by another. Equivalent to the `/` operator."
  },
  {
    "label": "EQ",
    "detail": "EQ(value1, value2)",
    "documentation": "Returns `TRUE` if two specified values are equal and `FALSE` otherwise. Equivalent to the `=` operator."
  },
  {
    "label": "GT",
    "detail": "GT(value1, value2)",
    "documentation": "Returns `TRUE` if the first argument is strictly greater than the second, and `FALSE` otherwise. Equivalent to the `>` operator."
  },
  {
    "label": "GTE",
    "detail": "GTE(value1, value2)",
    "documentation": "Returns `TRUE` if the first argument is greater than or equal to the second, and `FALSE` otherwise. Equivalent to the `>=` operator."
  },
  {
    "label": "ISBETWEEN",
    "detail": "ISBETWEEN(value_to_compare, lower_value, upper_value, lower_value_is_inclusive, upper_value_is_inclusive)",
    "documentation": "Checks whether a provided number is between two other numbers either inclusively or exclusively."
  },
  {
    "label": "LT",
    "detail": "LT(value1, value2)",
    "documentation": "Returns `TRUE` if the first argument is strictly less than the second, and `FALSE` otherwise. Equivalent to the `<` operator."
  },
  {
    "label": "LTE",
    "detail": "LTE(value1, value2)",
    "documentation": "Returns `TRUE` if the first argument is less than or equal to the second, and `FALSE` otherwise. Equivalent to the `<=` operator."
  },
  {
    "label": "MINUS",
    "detail": "MINUS(value1, value2)",
    "documentation": "Returns the difference of two numbers. Equivalent to the `-` operator."
  },
  {
    "label": "MULTIPLY",
    "detail": "MULTIPLY(factor1, factor2)",
    "documentation": "Returns the product of two numbers. Equivalent to the `*` operator."
  },
  {
    "label": "NE",
    "detail": "NE(value1, value2)",
    "documentation": "Returns `TRUE` if two specified values are not equal and `FALSE` otherwise. Equivalent to the `<>` operator."
  },
  {
    "label": "POW",
    "detail": "POW(base, exponent)",
    "documentation": "Returns a number raised to a power."
  },
  {
    "label": "UMINUS",
    "detail": "UMINUS(value)",
    "documentation": "Returns a number with the sign reversed."
  },
  {
    "label": "UNARY_PERCENT",
    "detail": "UNARY_PERCENT(percentage)",
    "documentation": "Returns a value interpreted as a percentage; that is, `UNARY_PERCENT(100)` equals `1`."
  },
  {
    "label": "UNIQUE",
    "detail": "UNIQUE(range, by_column, exactly_once)",
    "documentation": "Returns unique rows in the provided source range, discarding duplicates. Rows are returned in the order in which they first appear in the source range."
  },
  {
    "label": "UPLUS",
    "detail": "UPLUS(value)",
    "documentation": "Returns a specified number, unchanged."
  },
  {
    "label": "CONVERT",
    "detail": "CONVERT(value, start_unit, end_unit)",
    "documentation": "Converts a numeric value to a different unit of measure."
  },
  {
    "label": "TO_DATE",
    "detail": "TO_DATE(value)",
    "documentation": "Converts a provided number to a date."
  },
  {
    "label": "TO_DOLLARS",
    "detail": "TO_DOLLARS(value)",
    "documentation": "Converts a provided number to a dollar value."
  },
  {
    "label": "TO_PERCENT",
    "detail": "TO_PERCENT(value)",
    "documentation": "Converts a provided number to a percentage."
  },
  {
    "label": "TO_PURE_NUMBER",
    "detail": "TO_PURE_NUMBER(value)",
    "documentation": "Converts a provided date/time, percentage, currency or other formatted numeric value to a pure number without formatting."
  },
  {
    "label": "TO_TEXT",
    "detail": "TO_TEXT(value)",
    "documentation": "Converts a provided numeric value to a text value."
  },
  {
    "label": "AVEDEV",
    "detail": "AVEDEV(value1, [value2, ..])",
    "documentation": "Calculates the average of the magnitudes of deviations of data from a dataset's mean."
  },
  {
    "label": "AVERAGE",
    "detail": "AVERAGE(value1, [value2, ..])",
    "documentation": "Returns the numerical average value in a dataset, ignoring text."
  },
  {
    "label": "AVERAGE.WEIGHTED",
    "detail": "AVERAGE.WEIGHTED(values, weights, [additional values], [additional weights])",
    "documentation": "Finds the weighted average of a set of values, given the values and the corresponding weights."
  },
  {
    "label": "AVERAGEA",
    "detail": "AVERAGEA(value1, [value2, ..])",
    "documentation": "Returns the numerical average value in a dataset."
  },
  {
    "label": "AVERAGEIF",
    "detail": "AVERAGEIF(criteria_range, criterion, [average_range])",
    "documentation": "Returns the average of a range depending on criteria."
  },
  {
    "label": "AVERAGEIFS",
    "detail": "AVERAGEIFS(average_range, criteria_range1, criterion1, [criteria_range2, criterion2, ..])",
    "documentation": "Returns the average of a range depending on multiple criteria."
  },
  {
    "label": "BETA.DIST",
    "detail": "BETA.DIST(value, alpha, beta, cumulative, lower_bound, upper_bound)",
    "documentation": "Returns the probability of a given value as defined by the beta distribution function."
  },
  {
    "label": "BETA.INV",
    "detail": "BETA.INV(probability, alpha, beta, lower_bound, upper_bound)",
    "documentation": "Returns the value of the inverse beta distribution function for a given probability."
  },
  {
    "label": "BETADIST",
    "detail": "BETADIST(value, alpha, beta, lower_bound, upper_bound)",
    "documentation": "See BETA.DIST."
  },
  {
    "label": "BETAINV",
    "detail": "BETAINV(probability, alpha, beta, lower_bound, upper_bound)",
    "documentation": "See BETA.INV"
  },
  {
    "label": "BINOM.DIST",
    "detail": "BINOM.DIST(num_successes, num_trials, prob_success, cumulative)",
    "documentation": "See BINOMDIST"
  },
  {
    "label": "BINOM.INV",
    "detail": "BINOM.INV(num_trials, prob_success, target_prob)",
    "documentation": "See CRITBINOM"
  },
  {
    "label": "BINOMDIST",
    "detail": "BINOMDIST(num_successes, num_trials, prob_success, cumulative)",
    "documentation": "Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws."
  },
  {
    "label": "CHIDIST",
    "detail": "CHIDIST(x, degrees_freedom)",
    "documentation": "Calculates the right-tailed chi-squared distribution, often used in hypothesis testing."
  },
  {
    "label": "CHIINV",
    "detail": "CHIINV(probability, degrees_freedom)",
    "documentation": "Calculates the inverse of the right-tailed chi-squared distribution."
  },
  {
    "label": "CHISQ.DIST",
    "detail": "CHISQ.DIST(x, degrees_freedom, cumulative)",
    "documentation": "Calculates the left-tailed chi-squared distribution, often used in hypothesis testing."
  },
  {
    "label": "CHISQ.DIST.RT",
    "detail": "CHISQ.DIST.RT(x, degrees_freedom)",
    "documentation": "Calculates the right-tailed chi-squared distribution, which is commonly used in hypothesis testing."
  },
  {
    "label": "CHISQ.INV",
    "detail": "CHISQ.INV(probability, degrees_freedom)",
    "documentation": "Calculates the inverse of the left-tailed chi-squared distribution."
  },
  {
    "label": "CHISQ.INV.RT",
    "detail": "CHISQ.INV.RT(probability, degrees_freedom)",
    "documentation": "Calculates the inverse of the right-tailed chi-squared distribution."
  },
  {
    "label": "CHISQ.TEST",
    "detail": "CHISQ.TEST(observed_range, expected_range)",
    "documentation": "See CHITEST"
  },
  {
    "label": "CHITEST",
    "detail": "CHITEST(observed_range, expected_range)",
    "documentation": "Returns the probability associated with a Pearson’s chi-squared test on the two ranges of data. Determines the likelihood that the observed categorical data is drawn from an expected distribution."
  },
  {
    "label": "CONFIDENCE",
    "detail": "CONFIDENCE(alpha, standard_deviation, pop_size)",
    "documentation": "See CONFIDENCE.NORM"
  },
  {
    "label": "CONFIDENCE.NORM",
    "detail": "CONFIDENCE.NORM(alpha, standard_deviation, pop_size)",
    "documentation": "Calculates the width of half the confidence interval for a normal distribution."
  },
  {
    "label": "CONFIDENCE.T",
    "detail": "CONFIDENCE.T(alpha, standard_deviation, size)",
    "documentation": "Calculates the width of half the confidence interval for a Student’s t-distribution."
  },
  {
    "label": "CORREL",
    "detail": "CORREL(data_y, data_x)",
    "documentation": "Calculates r, the Pearson product-moment correlation coefficient of a dataset."
  },
  {
    "label": "COUNT",
    "detail": "COUNT(value1, [value2, ..])",
    "documentation": "Returns a count of the number of numeric values in a dataset."
  },
  {
    "label": "COUNTA",
    "detail": "COUNTA(value1, [value2, ..])",
    "documentation": "Returns a count of the number of values in a dataset."
  },
  {
    "label": "COVAR",
    "detail": "COVAR(data_y, data_x)",
    "documentation": "Calculates the covariance of a dataset."
  },
  {
    "label": "COVARIANCE.P",
    "detail": "COVARIANCE.P(data_y, data_x)",
    "documentation": "See COVAR"
  },
  {
    "label": "COVARIANCE.S",
    "detail": "COVARIANCE.S(data_y, data_x)",
    "documentation": "Calculates the covariance of a dataset, where the dataset is a sample of the total population."
  },
  {
    "label": "CRITBINOM",
    "detail": "CRITBINOM(num_trials, prob_success, target_prob)",
    "documentation": "Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria."
  },
  {
    "label": "DEVSQ",
    "detail": "DEVSQ(value1, value2)",
    "documentation": "Calculates the sum of squares of deviations based on a sample."
  },
  {
    "label": "EXPON.DIST",
    "detail": "EXPON.DIST(x, LAMBDA, cumulative)",
    "documentation": "Returns the value of the exponential distribution function with a specified LAMBDA at a specified value."
  },
  {
    "label": "EXPONDIST",
    "detail": "EXPONDIST(x, LAMBDA, cumulative)",
    "documentation": "See EXPON.DIST"
  },
  {
    "label": "F.DIST",
    "detail": "F.DIST(x, degrees_freedom1, degrees_freedom2, cumulative)",
    "documentation": "Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution."
  },
  {
    "label": "F.DIST.RT",
    "detail": "F.DIST.RT(x, degrees_freedom1, degrees_freedom2)",
    "documentation": "Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution."
  },
  {
    "label": "F.INV",
    "detail": "F.INV(probability, degrees_freedom1, degrees_freedom2)",
    "documentation": "Calculates the inverse of the left-tailed F probability distribution. Also called the Fisher-Snedecor distribution or Snedecor’s F distribution."
  },
  {
    "label": "F.INV.RT",
    "detail": "F.INV.RT(probability, degrees_freedom1, degrees_freedom2)",
    "documentation": "Calculates the inverse of the right-tailed F probability distribution. Also called the Fisher-Snedecor distribution or Snedecor’s F distribution."
  },
  {
    "label": "F.TEST",
    "detail": "F.TEST(range1, range2)",
    "documentation": "See FTEST."
  },
  {
    "label": "FDIST",
    "detail": "FDIST(x, degrees_freedom1, degrees_freedom2)",
    "documentation": "See F.DIST.RT."
  },
  {
    "label": "FINV",
    "detail": "FINV(probability, degrees_freedom1, degrees_freedom2)",
    "documentation": "See F.INV.RT"
  },
  {
    "label": "FISHER",
    "detail": "FISHER(value)",
    "documentation": "Returns the Fisher transformation of a specified value."
  },
  {
    "label": "FISHERINV",
    "detail": "FISHERINV(value)",
    "documentation": "Returns the inverse Fisher transformation of a specified value."
  },
  {
    "label": "FORECAST",
    "detail": "FORECAST(x, data_y, data_x)",
    "documentation": "Calculates the expected y-value for a specified x based on a linear regression of a dataset."
  },
  {
    "label": "FORECAST.LINEAR",
    "detail": "FORECAST.LINEAR(x, data_y, data_x)",
    "documentation": "See FORECAST"
  },
  {
    "label": "FTEST",
    "detail": "FTEST(range1, range2)",
    "documentation": "Returns the probability associated with an F-test for equality of variances. Determines whether two samples are likely to have come from populations with the same variance."
  },
  {
    "label": "GAMMA",
    "detail": "GAMMA(number)",
    "documentation": "Returns the Gamma function evaluated at the specified value."
  },
  {
    "label": "GAMMA.DIST",
    "detail": "GAMMA.DIST(x, alpha, beta, cumulative)",
    "documentation": "Calculates the gamma distribution, a two-parameter continuous probability distribution."
  },
  {
    "label": "GAMMA.INV",
    "detail": "GAMMA.INV(probability, alpha, beta)",
    "documentation": "The GAMMA.INV function returns the value of the inverse gamma cumulative distribution function for the specified probability and alpha and beta parameters."
  },
  {
    "label": "GAMMADIST",
    "detail": "GAMMADIST(x, alpha, beta, cumulative)",
    "documentation": "See GAMMA.DIST"
  },
  {
    "label": "GAMMAINV",
    "detail": "GAMMAINV(probability, alpha, beta)",
    "documentation": "See GAMMA.INV."
  },
  {
    "label": "GAUSS",
    "detail": "GAUSS(z)",
    "documentation": "The GAUSS function returns the probability that a random variable, drawn from a normal distribution, will be between the mean and z standard deviations above (or below) the mean."
  },
  {
    "label": "GEOMEAN",
    "detail": "GEOMEAN(value1, value2)",
    "documentation": "Calculates the geometric mean of a dataset."
  },
  {
    "label": "HARMEAN",
    "detail": "HARMEAN(value1, value2)",
    "documentation": "Calculates the harmonic mean of a dataset."
  },
  {
    "label": "HYPGEOM.DIST",
    "detail": "HYPGEOM.DIST(num_successes, num_draws, successes_in_pop, pop_size)",
    "documentation": "See HYPGEOMDIST"
  },
  {
    "label": "HYPGEOMDIST",
    "detail": "HYPGEOMDIST(num_successes, num_draws, successes_in_pop, pop_size)",
    "documentation": "Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws."
  },
  {
    "label": "INTERCEPT",
    "detail": "INTERCEPT(data_y, data_x)",
    "documentation": "Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0)."
  },
  {
    "label": "KURT",
    "detail": "KURT(value1, value2)",
    "documentation": "Calculates the kurtosis of a dataset, which describes the shape, and in particular the \"peakedness\" of that dataset."
  },
  {
    "label": "LARGE",
    "detail": "LARGE(data, n)",
    "documentation": "Returns the nth largest element from a data set, where n is user-defined."
  },
  {
    "label": "LOGINV",
    "detail": "LOGINV(x, mean, standard_deviation)",
    "documentation": "Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value."
  },
  {
    "label": "LOGNORM.DIST",
    "detail": "LOGNORM.DIST(x, mean, standard_deviation)",
    "documentation": "See LOGNORMDIST"
  },
  {
    "label": "LOGNORM.INV",
    "detail": "LOGNORM.INV(x, mean, standard_deviation)",
    "documentation": "See LOGINV"
  },
  {
    "label": "LOGNORMDIST",
    "detail": "LOGNORMDIST(x, mean, standard_deviation)",
    "documentation": "Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value."
  },
  {
    "label": "MARGINOFERROR",
    "detail": "MARGINOFERROR(range, confidence)",
    "documentation": "Calculates the amount of random sampling error given a range of values and a confidence level."
  },
  {
    "label": "MAX",
    "detail": "MAX(value1, [value2, ..])",
    "documentation": "Returns the maximum value in a numeric dataset."
  },
  {
    "label": "MAXA",
    "detail": "MAXA(value1, value2)",
    "documentation": "Returns the maximum numeric value in a dataset."
  },
  {
    "label": "MAXIFS",
    "detail": "MAXIFS(range, criteria_range1, criterion1, [criteria_range2, criterion2], …)",
    "documentation": "Returns the maximum value in a range of cells, filtered by a set of criteria."
  },
  {
    "label": "MEDIAN",
    "detail": "MEDIAN(value1, [value2, ..])",
    "documentation": "Returns the median value in a numeric dataset."
  },
  {
    "label": "MIN",
    "detail": "MIN(value1, [value2, ..])",
    "documentation": "Returns the minimum value in a numeric dataset."
  },
  {
    "label": "MINA",
    "detail": "MINA(value1, value2)",
    "documentation": "Returns the minimum numeric value in a dataset."
  },
  {
    "label": "MINIFS",
    "detail": "MINIFS(range, criteria_range1, criterion1, [criteria_range2, criterion2], …)",
    "documentation": "Returns the minimum value in a range of cells, filtered by a set of criteria."
  },
  {
    "label": "MODE",
    "detail": "MODE(value1, [value2, ..])",
    "documentation": "Returns the most commonly occurring value in a dataset."
  },
  {
    "label": "MODE.MULT",
    "detail": "MODE.MULT(value1, value2)",
    "documentation": "Returns the most commonly occurring values in a dataset."
  },
  {
    "label": "MODE.SNGL",
    "detail": "MODE.SNGL(value1, [value2, ..])",
    "documentation": "See MODE"
  },
  {
    "label": "NEGBINOM.DIST",
    "detail": "NEGBINOM.DIST(num_failures, num_successes, prob_success)",
    "documentation": "See NEGBINOMDIST"
  },
  {
    "label": "NEGBINOMDIST",
    "detail": "NEGBINOMDIST(num_failures, num_successes, prob_success)",
    "documentation": "Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials."
  },
  {
    "label": "NORM.DIST",
    "detail": "NORM.DIST(x, mean, standard_deviation, cumulative)",
    "documentation": "See NORMDIST"
  },
  {
    "label": "NORM.INV",
    "detail": "NORM.INV(x, mean, standard_deviation)",
    "documentation": "See NORMINV"
  },
  {
    "label": "NORM.S.DIST",
    "detail": "NORM.S.DIST(x)",
    "documentation": "See NORMSDIST"
  },
  {
    "label": "NORM.S.INV",
    "detail": "NORM.S.INV(x)",
    "documentation": "See NORMSINV"
  },
  {
    "label": "NORMDIST",
    "detail": "NORMDIST(x, mean, standard_deviation, cumulative)",
    "documentation": "Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation."
  },
  {
    "label": "NORMINV",
    "detail": "NORMINV(x, mean, standard_deviation)",
    "documentation": "Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation."
  },
  {
    "label": "NORMSDIST",
    "detail": "NORMSDIST(x)",
    "documentation": "Returns the value of the standard normal cumulative distribution function for a specified value."
  },
  {
    "label": "NORMSINV",
    "detail": "NORMSINV(x)",
    "documentation": "Returns the value of the inverse standard normal distribution function for a specified value."
  },
  {
    "label": "PEARSON",
    "detail": "PEARSON(data_y, data_x)",
    "documentation": "Calculates r, the Pearson product-moment correlation coefficient of a dataset."
  },
  {
    "label": "PERCENTILE",
    "detail": "PERCENTILE(data, percentile)",
    "documentation": "Returns the value at a given percentile of a dataset."
  },
  {
    "label": "PERCENTILE.EXC",
    "detail": "PERCENTILE.EXC(data, percentile)",
    "documentation": "Returns the value at a given percentile of a dataset, exclusive of 0 and 1."
  },
  {
    "label": "PERCENTILE.INC",
    "detail": "PERCENTILE.INC(data, percentile)",
    "documentation": "See PERCENTILE"
  },
  {
    "label": "PERCENTRANK",
    "detail": "PERCENTRANK(data, value, [significant_digits])",
    "documentation": "Returns the percentage rank (percentile) of a specified value in a dataset."
  },
  {
    "label": "PERCENTRANK.EXC",
    "detail": "PERCENTRANK.EXC(data, value, [significant_digits])",
    "documentation": "Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset."
  },
  {
    "label": "PERCENTRANK.INC",
    "detail": "PERCENTRANK.INC(data, value, [significant_digits])",
    "documentation": "Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset."
  },
  {
    "label": "PERMUTATIONA",
    "detail": "PERMUTATIONA(number, number_chosen)",
    "documentation": "Returns the number of permutations for selecting a group of objects (with replacement) from a total number of objects."
  },
  {
    "label": "PERMUT",
    "detail": "PERMUT(n, k)",
    "documentation": "Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order."
  },
  {
    "label": "PHI",
    "detail": "PHI(x)",
    "documentation": "The PHI function returns the value of the normal distribution with mean 0 and standard deviation 1."
  },
  {
    "label": "POISSON",
    "detail": "POISSON(x, mean, cumulative)",
    "documentation": "See POISSON.DIST"
  },
  {
    "label": "POISSON.DIST",
    "detail": "POISSON.DIST(x, mean, [cumulative])",
    "documentation": "Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean."
  },
  {
    "label": "PROB",
    "detail": "PROB(data, probabilities, low_limit, [high_limit])",
    "documentation": "Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits."
  },
  {
    "label": "QUARTILE",
    "detail": "QUARTILE(data, quartile_number)",
    "documentation": "Returns a value nearest to a specified quartile of a dataset."
  },
  {
    "label": "QUARTILE.EXC",
    "detail": "QUARTILE.EXC(data, quartile_number)",
    "documentation": "Returns value nearest to a given quartile of a dataset, exclusive of 0 and 4."
  },
  {
    "label": "QUARTILE.INC",
    "detail": "QUARTILE.INC(data, quartile_number)",
    "documentation": "See QUARTILE"
  },
  {
    "label": "RANK",
    "detail": "RANK(value, data, [is_ascending])",
    "documentation": "Returns the rank of a specified value in a dataset."
  },
  {
    "label": "RANK.AVG",
    "detail": "RANK.AVG(value, data, [is_ascending])",
    "documentation": "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned."
  },
  {
    "label": "RANK.EQ",
    "detail": "RANK.EQ(value, data, [is_ascending])",
    "documentation": "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned."
  },
  {
    "label": "RSQ",
    "detail": "RSQ(data_y, data_x)",
    "documentation": "Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset."
  },
  {
    "label": "SKEW",
    "detail": "SKEW(value1, value2)",
    "documentation": "Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean."
  },
  {
    "label": "SKEW.P",
    "detail": "SKEW.P(value1, value2)",
    "documentation": "Calculates the skewness of a dataset that represents the entire population."
  },
  {
    "label": "SLOPE",
    "detail": "SLOPE(data_y, data_x)",
    "documentation": "Calculates the slope of the line resulting from linear regression of a dataset."
  },
  {
    "label": "SMALL",
    "detail": "SMALL(data, n)",
    "documentation": "Returns the nth smallest element from a data set, where n is user-defined."
  },
  {
    "label": "STANDARDIZE",
    "detail": "STANDARDIZE(value, mean, standard_deviation)",
    "documentation": "Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution."
  },
  {
    "label": "STDEV",
    "detail": "STDEV(value1, [value2, ..])",
    "documentation": "Calculates the standard deviation based on a sample."
  },
  {
    "label": "STDEV.P",
    "detail": "STDEV.P(value1, [value2, ..])",
    "documentation": "See STDEVP"
  },
  {
    "label": "STDEV.S",
    "detail": "STDEV.S(value1, [value2, ..])",
    "documentation": "See STDEV"
  },
  {
    "label": "STDEVA",
    "detail": "STDEVA(value1, value2)",
    "documentation": "Calculates the standard deviation based on a sample, setting text to the value `0`."
  },
  {
    "label": "STDEVP",
    "detail": "STDEVP(value1, value2)",
    "documentation": "Calculates the standard deviation based on an entire population."
  },
  {
    "label": "STDEVPA",
    "detail": "STDEVPA(value1, value2)",
    "documentation": "Calculates the standard deviation based on an entire population, setting text to the value `0`."
  },
  {
    "label": "STEYX",
    "detail": "STEYX(data_y, data_x)",
    "documentation": "Calculates the standard error of the predicted y-value for each x in the regression of a dataset."
  },
  {
    "label": "T.DIST",
    "detail": "T.DIST(x, degrees_freedom, cumulative)",
    "documentation": "Returns the right tailed Student distribution for a value x."
  },
  {
    "label": "T.DIST.2T",
    "detail": "T.DIST.2T(x, degrees_freedom)",
    "documentation": "Returns the two tailed Student distribution for a value x."
  },
  {
    "label": "T.DIST.RT",
    "detail": "T.DIST.RT(x, degrees_freedom)",
    "documentation": "Returns the right tailed Student distribution for a value x."
  },
  {
    "label": "T.INV",
    "detail": "T.INV(probability, degrees_freedom)",
    "documentation": "Calculates the negative inverse of the one-tailed TDIST function."
  },
  {
    "label": "T.INV.2T",
    "detail": "T.INV.2T(probability, degrees_freedom)",
    "documentation": "Calculates the inverse of the two-tailed TDIST function."
  },
  {
    "label": "T.TEST",
    "detail": "T.TEST(range1, range2, tails, type)",
    "documentation": "Returns the probability associated with Student's t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean"
  },
  {
    "label": "TDIST",
    "detail": "TDIST(x, degrees_freedom, tails)",
    "documentation": "Calculates the probability for Student's t-distribution with a given input (x)."
  },
  {
    "label": "TINV",
    "detail": "TINV(probability, degrees_freedom)",
    "documentation": "See T.INV.2T"
  },
  {
    "label": "TRIMMEAN",
    "detail": "TRIMMEAN(data, exclude_proportion)",
    "documentation": "Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset."
  },
  {
    "label": "TTEST",
    "detail": "TTEST(range1, range2, tails, type)",
    "documentation": "See T.TEST."
  },
  {
    "label": "VAR",
    "detail": "VAR(value1, [value2, ...])",
    "documentation": "Calculates the variance based on a sample."
  },
  {
    "label": "VAR.P",
    "detail": "VAR.P(value1, [value2, ...])",
    "documentation": "See VARP"
  },
  {
    "label": "VAR.S",
    "detail": "VAR.S(value1, [value2, ...])",
    "documentation": "See VAR"
  },
  {
    "label": "VARA",
    "detail": "VARA(value1, value2)",
    "documentation": "Calculates an estimate of variance based on a sample, setting text to the value `0`."
  },
  {
    "label": "VARP",
    "detail": "VARP(value1, value2)",
    "documentation": "Calculates the variance based on an entire population."
  },
  {
    "label": "VARPA",
    "detail": "VARPA(value1, value2,...)",
    "documentation": "Calculates the variance based on an entire population, setting text to the value `0`."
  },
  {
    "label": "WEIBULL",
    "detail": "WEIBULL(x, shape, scale, cumulative)",
    "documentation": "Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale."
  },
  {
    "label": "WEIBULL.DIST",
    "detail": "WEIBULL.DIST(x, shape, scale, cumulative)",
    "documentation": "See WEIBULL"
  },
  {
    "label": "Z.TEST",
    "detail": "Z.TEST(data, value, [standard_deviation])",
    "documentation": "Returns the one-tailed P-value of a Z-test with standard distribution"
  },
  {
    "label": "ZTEST",
    "detail": "ZTEST(data, value, [standard_deviation])",
    "documentation": "See Z.TEST."
  },
  {
    "label": "ARABIC",
    "detail": "ARABIC(roman_numeral)",
    "documentation": "Computes the value of a Roman numeral."
  },
  {
    "label": "ASC",
    "detail": "ASC(text)",
    "documentation": "Converts full-width ASCII and katakana characters to their half-width counterparts. All standard-width characters will remain unchanged"
  },
  {
    "label": "CHAR",
    "detail": "CHAR(table_number)",
    "documentation": "Convert a number into a character according to the current Unicode table."
  },
  {
    "label": "CLEAN",
    "detail": "CLEAN(text)",
    "documentation": "Returns the text with the non-printable ASCII characters removed."
  },
  {
    "label": "CODE",
    "detail": "CODE(string)",
    "documentation": "Returns the numeric Unicode map value of the first character in the string provided."
  },
  {
    "label": "CONCATENATE",
    "detail": "CONCATENATE(string1, [string2, ...])",
    "documentation": "Appends strings to one another."
  },
  {
    "label": "DOLLAR",
    "detail": "DOLLAR(number, [number_of_places])",
    "documentation": "Formats a number into the locale-specific currency format."
  },
  {
    "label": "EXACT",
    "detail": "EXACT(string1, string2)",
    "documentation": "Tests whether two strings are identical."
  },
  {
    "label": "FIND",
    "detail": "FIND(search_for, text_to_search, [starting_at])",
    "documentation": "Returns the position at which a string is first found within text."
  },
  {
    "label": "FINDB",
    "detail": "FINDB(search_for, text_to_search, [starting_at])",
    "documentation": "Returns the position at which a string is first found within text counting each double-character as 2."
  },
  {
    "label": "FIXED",
    "detail": "FIXED(number, [number_of_places], [suppress_separator])",
    "documentation": "Formats a number with a fixed number of decimal places."
  },
  {
    "label": "JOIN",
    "detail": "JOIN(delimiter, value_or_array1, [value_or_array2, ...])",
    "documentation": "Concatenates the elements of one or more one-dimensional arrays using a specified delimiter."
  },
  {
    "label": "LEFT",
    "detail": "LEFT(string, [number_of_characters])",
    "documentation": "Returns a substring from the beginning of a specified string."
  },
  {
    "label": "LEFTB",
    "detail": "LEFTB(string, num_of_bytes)",
    "documentation": "Returns the left portion of a string up to a certain number of bytes"
  },
  {
    "label": "LEN",
    "detail": "LEN(text)",
    "documentation": "Returns the length of a string."
  },
  {
    "label": "LENB",
    "detail": "LENB(string)",
    "documentation": "Returns the length of a string in bytes."
  },
  {
    "label": "LOWER",
    "detail": "LOWER(text)",
    "documentation": "Converts a specified string to lowercase."
  },
  {
    "label": "MID",
    "detail": "MID(string, starting_at, extract_length)",
    "documentation": "Returns a segment of a string."
  },
  {
    "label": "MIDB",
    "detail": "MIDB(string)",
    "documentation": "Returns a section of a string starting at a given character and up to a specified number of bytes."
  },
  {
    "label": "PROPER",
    "detail": "PROPER(text_to_capitalize)",
    "documentation": "Capitalizes each word in a specified string."
  },
  {
    "label": "REGEXEXTRACT",
    "detail": "REGEXEXTRACT(text, regular_expression)",
    "documentation": "Extracts matching substrings according to a regular expression."
  },
  {
    "label": "REGEXMATCH",
    "detail": "REGEXMATCH(text, regular_expression)",
    "documentation": "Whether a piece of text matches a regular expression."
  },
  {
    "label": "REGEXREPLACE",
    "detail": "REGEXREPLACE(text, regular_expression, replacement)",
    "documentation": "Replaces part of a text string with a different text string using regular expressions."
  },
  {
    "label": "REPLACE",
    "detail": "REPLACE(text, position, length, new_text)",
    "documentation": "Replaces part of a text string with a different text string."
  },
  {
    "label": "REPLACEB",
    "detail": "REPLACEB(text, position, num_bytes, new_text)",
    "documentation": "Replaces part of a text string, based on a number of bytes, with a different text string."
  },
  {
    "label": "REPT",
    "detail": "REPT(text_to_repeat, number_of_repetitions)",
    "documentation": "Returns specified text repeated a number of times."
  },
  {
    "label": "RIGHT",
    "detail": "RIGHT(string, [number_of_characters])",
    "documentation": "Returns a substring from the end of a specified string."
  },
  {
    "label": "RIGHTB",
    "detail": "RIGHTB(string, num_of_bytes)",
    "documentation": "Returns the right portion of a string up to a certain number of bytes."
  },
  {
    "label": "ROMAN",
    "detail": "ROMAN(number, [rule_relaxation])",
    "documentation": "Formats a number in Roman numerals."
  },
  {
    "label": "SEARCH",
    "detail": "SEARCH(search_for, text_to_search, [starting_at])",
    "documentation": "Returns the position at which a string is first found within text."
  },
  {
    "label": "SEARCHB",
    "detail": "SEARCHB(search_for, text_to_search, [starting_at])",
    "documentation": "Returns the position at which a string is first found within text counting each double-character as 2."
  },
  {
    "label": "SPLIT",
    "detail": "SPLIT(text, delimiter, [split_by_each], [remove_empty_text])",
    "documentation": "Divides text around a specified character or string, and puts each fragment into a separate cell in the row."
  },
  {
    "label": "SUBSTITUTE",
    "detail": "SUBSTITUTE(text_to_search, search_for, replace_with, [occurrence_number])",
    "documentation": "Replaces existing text with new text in a string."
  },
  {
    "label": "T",
    "detail": "T(value)",
    "documentation": "Returns string arguments as text."
  },
  {
    "label": "TEXT",
    "detail": "TEXT(number, format)",
    "documentation": "Converts a number into text according to a specified format."
  },
  {
    "label": "TEXTJOIN",
    "detail": "TEXTJOIN(delimiter, ignore_empty, text1, [text2], …)",
    "documentation": "Combines the text from multiple strings and/or arrays, with a specifiable delimiter separating the different texts."
  },
  {
    "label": "TRIM",
    "detail": "TRIM(text)",
    "documentation": "Removes leading and trailing spaces in a specified string."
  },
  {
    "label": "UNICHAR",
    "detail": "UNICHAR(number)",
    "documentation": "Returns the Unicode character for a number."
  },
  {
    "label": "UNICODE",
    "detail": "UNICODE(text)",
    "documentation": "Returns the decimal Unicode value of the first character of the text."
  },
  {
    "label": "UPPER",
    "detail": "UPPER(text)",
    "documentation": "Converts a specified string to uppercase."
  },
  {
    "label": "VALUE",
    "detail": "VALUE(text)",
    "documentation": "Converts a string in any of the date, time or number formats that Google Sheets understands into a number."
  },
  {
    "label": "ENCODEURL",
    "detail": "ENCODEURL(text)",
    "documentation": "Encodes a string of text for the purpose of using in a URL query."
  },
  {
    "label": "HYPERLINK",
    "detail": "HYPERLINK(url, [link_label])",
    "documentation": "Creates a hyperlink inside a cell."
  },
  {
    "label": "IMPORTDATA",
    "detail": "IMPORTDATA(url)",
    "documentation": "Imports data at a given url in .csv (comma-separated value) or .tsv (tab-separated value) format."
  },
  {
    "label": "IMPORTFEED",
    "detail": "IMPORTFEED(url, [query], [headers], [num_items])",
    "documentation": "Imports a RSS or ATOM feed."
  },
  {
    "label": "IMPORTHTML",
    "detail": "IMPORTHTML(url, query, index)",
    "documentation": "Imports data from a table or list within an HTML page."
  },
  {
    "label": "IMPORTRANGE",
    "detail": "IMPORTRANGE(spreadsheet_url, range_string)",
    "documentation": "Imports a range of cells from a specified spreadsheet."
  },
  {
    "label": "IMPORTXML",
    "detail": "IMPORTXML(url, xpath_query)",
    "documentation": "Imports data from any of various structured data types including XML, HTML, CSV, TSV, and RSS and ATOM XML feeds."
  },
  {
    "label": "ISURL",
    "detail": "ISURL(value)",
    "documentation": "Checks whether a value is a valid URL."
  }
]